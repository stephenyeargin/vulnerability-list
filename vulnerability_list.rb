# frozen_string_literal: true

require 'octokit'
require 'json'
require 'terminal-table'

def get_data(username = nil, cursor = nil)
  client = Octokit::Client.new(access_token: ENV['GITHUB_TOKEN'])
  pagination = 'first: 100'
  pagination = "first: 100, after: \"#{cursor}\"" if cursor
  username = client.user.login if username.nil?

  query = %(

    query {
      repositoryOwner(login: "#{username}") {
          repositories(#{pagination}) {
            totalCount
            pageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }
            nodes {
              name
              isArchived
              vulnerabilityAlerts(first: 100) {
                totalCount
                pageInfo {
                  hasNextPage
                  hasPreviousPage
                  startCursor
                  endCursor
                }
                nodes {
                  createdAt
                  state
                  vulnerableRequirements
                  dismissedAt
                  dismissReason
                  securityVulnerability {
                    advisory {
                      description
                      identifiers {
                        value
                      }
                    }
                    severity
                    package {
                      ecosystem
                      name
                    }
                    updatedAt
                    vulnerableVersionRange
                  }
                }
              }
            }
          }
        }
      }

  )

  client.post '/graphql', { query: query }.to_json
end

username = ARGV[0] || nil
nodes = []
has_next_page = true
cursor = nil

while has_next_page
  response = get_data(username, cursor)
  if response[:errors]
    puts response[:errors].inspect
    exit 1
  end
  if response['data']['repositoryOwner'].nil?
    puts "No data returned for #{username}."
    exit 1
  end
  nodes += response['data']['repositoryOwner']['repositories']['nodes']
  has_next_page = response['data']['repositoryOwner']['repositories']['pageInfo']['hasNextPage']
  cursor = response['data']['repositoryOwner']['repositories']['pageInfo']['endCursor']
end

rows = []
nodes.each do |repository|
  next if repository['vulnerabilityAlerts']['totalCount'].zero?
  next if repository['isArchived']

  state_open = 0
  state_fixed = 0
  state_closed = 0
  repository['vulnerabilityAlerts']['nodes'].each do |alert|
    state_open += 1 if alert['state'] == 'OPEN'
    state_fixed += 1 if alert['state'] == 'FIXED'
    state_closed += 1 if alert['state'] == 'CLOSED'
  end

  next if state_open.zero?

  rows << [repository['name'], state_open, state_fixed, state_closed, repository['vulnerabilityAlerts']['totalCount']]
end

table = Terminal::Table.new headings: ['Repository', 'Open', 'Fixed', 'Closed', 'Total'], rows: rows
table.align_column(1, :right)
table.align_column(2, :right)
table.align_column(3, :right)
table.align_column(4, :right)
puts table
